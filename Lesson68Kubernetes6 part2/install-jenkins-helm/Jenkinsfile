pipeline {
    agent { 
        kubernetes {
          label 'helm-kubectl-pod'   
        }
    }

    stages {
       
         stage('run kubectl version') {
            steps {
                container('helm-kubectl-pod') {
                     sh 'kubectl version'
                }
            }
        }
         stage('run helm version') {
            steps {
                container('helm-kubectl-pod') {
                     sh 'helm version'
                }
            }
        }
        stage('run get pods') {
            steps {
                container('helm-kubectl-pod') {
                     sh 'kubectl get pods'
                }
            }
        }
        stage('create python hello deployment') {
            steps {
                container('helm-kubectl-pod') {
                     sh '''
kubectl apply -f - <<EOF
apiVersion: apps/v1
kind: Deployment
metadata:
  name: python-flask-hello-deployment
spec:
  replicas: 2  
  selector:
    matchLabels:
      app: python-flask-hello
  template:
    metadata: # metadata
      labels:
        app: python-flask-hello
    spec:
      containers:
        - name: python-flask-hello-container
          image: mrbarker/python-flask-hello
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: python-flask-hello-service
  
spec:
  selector:
    app: python-flask-hello
  ports:
    - protocol: TCP
      port: 9080
      targetPort: 8080
  type: LoadBalancer
EOF
                     '''
                }
            }
        }
    }
}
